<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/06/15/hello-world/"/>
    <url>/2020/06/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="hljs"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="hljs"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="hljs"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="hljs"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>习题11-8 单链表结点删除</title>
    <link href="/2020/03/14/%E4%B9%A0%E9%A2%9811-8%20%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E7%82%B9%E5%88%A0%E9%99%A4/"/>
    <url>/2020/03/14/%E4%B9%A0%E9%A2%9811-8%20%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E7%82%B9%E5%88%A0%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<p> 本题要求实现两个函数，分别将读入的数据存储为单链表、将链表中所有存储了某给定值的结点删除。</p><div class="hljs"><pre><code>链表结点定义如下：</code></pre></div><div class="hljs"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span>    <span class="hljs-keyword">int</span> data;    ListNode *next;&#125;;</code></pre></div><div class="hljs"><pre><code>函数接口定义：</code></pre></div><blockquote><p>struct ListNode *readlist();<br>struct ListNode *deletem( struct ListNode *L, int m );</p></blockquote><p>函数readlist从标准输入读入一系列正整数，按照读入顺序建立单链表。当读到−1时表示输入结束，函数应返回指向单链表头结点的指针。<br>函数deletem将单链表L中所有存储了m的结点删除。返回指向结果链表头结点的指针。</p><div class="hljs"><pre><code>裁判测试程序样例：</code></pre></div><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span>    <span class="hljs-keyword">int</span> data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">next</span>;</span>&#125;;<span class="hljs-function">struct ListNode *<span class="hljs-title">readlist</span><span class="hljs-params">()</span></span>;<span class="hljs-function">struct ListNode *<span class="hljs-title">deletem</span><span class="hljs-params">( struct ListNode *L, <span class="hljs-keyword">int</span> m )</span></span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printlist</span><span class="hljs-params">( struct ListNode *L )</span></span><span class="hljs-function"></span>&#123;     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">p</span> = <span class="hljs-title">L</span>;</span>     <span class="hljs-keyword">while</span> (p) &#123;           <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, p-&gt;data);           p = p-&gt;next;     &#125;     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> m;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">L</span> = <span class="hljs-title">readlist</span>();</span>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;m);    L = deletem(L, m);    printlist(L);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><div class="hljs"><pre><code>输入样例：10 11 10 12 10 -1         10输出样例：11 12 </code></pre></div><p>答案：</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-function">struct ListNode *<span class="hljs-title">readlist</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">//读入一系列正整数，按照读入顺序建立单链表。</span><span class="hljs-keyword">int</span> c,flag=<span class="hljs-number">1</span>;<span class="hljs-comment">//检查输入是否正确</span><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;c);<span class="hljs-comment">/*建立表头*/</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">l</span>;</span>l=(struct ListNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct ListNode));<span class="hljs-keyword">if</span>(c!=(<span class="hljs-number">-1</span>))&#123;l-&gt;data=c;             l-&gt;next=<span class="hljs-literal">NULL</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<span class="hljs-comment">/*尾插法建表*/</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">r</span>;</span>r=l;<span class="hljs-comment">/*r始终动态地指向表尾,初值指向头结点*/</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">n</span>;</span><span class="hljs-keyword">while</span>(flag) &#123;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;c);<span class="hljs-keyword">if</span>(c!=(<span class="hljs-number">-1</span>)) &#123;n=(struct ListNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct ListNode));n-&gt;data=c;n-&gt;next=<span class="hljs-literal">NULL</span>;r-&gt;next=n;r=n;<span class="hljs-comment">//r就是当前尾结点</span>&#125; <span class="hljs-keyword">else</span> &#123;r-&gt;next=<span class="hljs-literal">NULL</span>;flag=<span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-keyword">return</span> l;&#125;<span class="hljs-function">struct ListNode *<span class="hljs-title">deletem</span><span class="hljs-params">( struct ListNode *L, <span class="hljs-keyword">int</span> m )</span> </span>&#123;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">h</span>,*<span class="hljs-title">p</span>,*<span class="hljs-title">q</span>;</span>h=L;<span class="hljs-comment">//先保证头结点不是m</span><span class="hljs-keyword">while</span>(h-&gt;data==m&amp;&amp;(h-&gt;next!=<span class="hljs-literal">NULL</span>)) &#123;p=h-&gt;next;<span class="hljs-built_in">free</span>(h);h=p;&#125;<span class="hljs-comment">//如果整个链表都删没了，返回NULL </span><span class="hljs-keyword">if</span>(h-&gt;data==m)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125;<span class="hljs-comment">//删除符合条件的结点</span>p=h;q=p-&gt;next;<span class="hljs-keyword">while</span>(q) &#123;<span class="hljs-keyword">if</span>(q-&gt;data==m) &#123;p-&gt;next=q-&gt;next;<span class="hljs-built_in">free</span>(q);q=p-&gt;next;<span class="hljs-keyword">continue</span>;&#125; <span class="hljs-keyword">else</span> &#123;p=q;q=q-&gt;next;&#125;&#125;<span class="hljs-keyword">return</span> h;&#125;</code></pre></div><blockquote><p>一点小小的流水账吧，纪念一下第一道和数据结构有关的题哈哈哈，我真的很菜。这道题断断续续竟然做了六个多小时…就很离谱，气的眼泪都要掉出来了。写出来其实没有多久，只是一直钻牛角尖想改自己的代码，也看不进去别人写的正确答案。<br>大一之前都没接触过编程，大一上加寒假因为各种nt事浪费了很多时间。过去种种真的很想放下说重新开始，但真的比别人差太多了，实名菜狗弟弟，没办法原谅这样的自己。<br>这段时间早上四点起来听网课敲代码记笔记，不断反省，其实也是强迫症地焦虑，甚至条件反射到不管晚上睡不睡得着早上四点都要起来学习，导致午睡根本起不来，最近只能下午狂喝黑咖＋中高强度运动避免午睡改掉这个辣鸡作息，争取稳定在晚十点半早四点半到五点。<br>还考虑了很久保研/考研/就业的事，学高数/线代/离散/大物/通信真的有压榨我敲代码的时间，但是又不想成绩不好看，毕竟还想拼一拼奖学金x包括还在打辩论，三月份是无差别比赛，就在明天开始抽签，寒假拿了个网辩季军回来还是有点小高兴的哈哈哈虽然和技术没啥关系x。还在准备六级的事，争取大一下就过六级。<br>虽然记录流水账的时候看起来很欢快，但是我永远不会忘记这个春天。如果这二十天的焦虑，痛苦，强迫和抑郁的心情是努力的敲门砖，那我愿意也舍得去尝试，希望，哦不是一定，度过这段日子之后要长长久久地坚持。<br>偷偷努力，要来证明我的选择是对的，而这一切都是-<br>我  值  得。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>练习题</category>
      
      <category>数据结构</category>
      
      <category>链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA练习题</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>练习5-1 求m到n之和</title>
    <link href="/2019/10/29/%E7%BB%83%E4%B9%A05-1%20%E6%B1%82m%E5%88%B0n%E4%B9%8B%E5%92%8C/"/>
    <url>/2019/10/29/%E7%BB%83%E4%B9%A05-1%20%E6%B1%82m%E5%88%B0n%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p>本题要求实现一个计算m~n（m&lt;n）之间所有整数的和的简单函数。<br>函数接口定义：</p><div class="hljs"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span>( <span class="hljs-built_in">int</span> m, <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span> );</code></pre></div><p>其中m和n是用户传入的参数，保证有m&lt;n。函数返回的是m~n之间所有整数的和。</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m,<span class="hljs-keyword">int</span> n)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(m&lt;=n)&#123;sum = sum +m;m=m+<span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> sum;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;        <span class="hljs-keyword">int</span> m, n;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;m, &amp;n);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"sum = %d\n"</span>, sum(m, n));    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>练习题</category>
      
      <category>入门训练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA练习题</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>练习5-3 数字金字塔</title>
    <link href="/2019/10/29/%E7%BB%83%E4%B9%A05-3%20%E6%95%B0%E5%AD%97%E9%87%91%E5%AD%97%E5%A1%94/"/>
    <url>/2019/10/29/%E7%BB%83%E4%B9%A05-3%20%E6%95%B0%E5%AD%97%E9%87%91%E5%AD%97%E5%A1%94/</url>
    
    <content type="html"><![CDATA[<p>本题要求实现函数输出n行数字金字塔。<br>函数接口定义：</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pyramid</span><span class="hljs-params">( <span class="hljs-keyword">int</span> n )</span></span>;</code></pre></div><p>其中n是用户传入的参数，为[1, 9]的正整数。<br>要求函数按照如样例所示的格式打印出n行数字金字塔。<br>注意每个数字后面跟一个空格</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pyramid</span><span class="hljs-params">( <span class="hljs-keyword">int</span> n )</span> </span>&#123;<span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>;<span class="hljs-keyword">int</span> b=<span class="hljs-number">1</span>;<span class="hljs-keyword">int</span> c=n;<span class="hljs-keyword">for</span>(a=<span class="hljs-number">1</span>; a&lt;=n; a+=<span class="hljs-number">1</span>) &#123;<span class="hljs-keyword">for</span>(c=n; a&lt;c<span class="hljs-number">-1</span>; c-=<span class="hljs-number">1</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);&#125;<span class="hljs-keyword">if</span>(a==n) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,a);<span class="hljs-keyword">for</span>(b=<span class="hljs-number">1</span>; a&gt;b; b+=<span class="hljs-number">1</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,a);<span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);&#125;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">" %d"</span>,a);<span class="hljs-keyword">for</span>(b=<span class="hljs-number">1</span>; a&gt;b; b+=<span class="hljs-number">1</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,a);&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;        <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);    pyramid(n);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    system(<span class="hljs-string">"pause"</span>);&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>练习题</category>
      
      <category>入门训练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA练习题</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>练习5-2 找两个数中最大者</title>
    <link href="/2019/10/29/%E7%BB%83%E4%B9%A05-2%20%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%95%B0%E4%B8%AD%E6%9C%80%E5%A4%A7%E8%80%85/"/>
    <url>/2019/10/29/%E7%BB%83%E4%B9%A05-2%20%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%95%B0%E4%B8%AD%E6%9C%80%E5%A4%A7%E8%80%85/</url>
    
    <content type="html"><![CDATA[<p>本题要求对两个整数a和b，输出其中较大的数。<br>函数接口定义</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">( <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b )</span></span>;</code></pre></div><p>其中a和b是用户传入的参数，函数返回的是两者中较大的数</p><div class="hljs"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">( <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b )</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> <span class="hljs-built_in">max</span>;<span class="hljs-keyword">if</span>(a&gt;b)&#123;<span class="hljs-built_in">max</span>=a;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">max</span>=b;&#125;<span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;        <span class="hljs-keyword">int</span> a, b;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;a, &amp;b);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"max = %d\n"</span>, <span class="hljs-built_in">max</span>(a, b));    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>练习题</category>
      
      <category>入门训练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PTA练习题</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
